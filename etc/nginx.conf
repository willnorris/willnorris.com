# Redirect https requests for www.willnorris.com to willnorris.com.
# This is also set as the default ssl server to handle requests for other hosts
# on this server like https://willnorris.net/.  They will produce a certificate
# error, but if that is clicked through they will redirect to
# https://willnorris.com/ also.
server {
  listen 443 default_server ssl http2;
  listen [::]:443 default_server ssl http2;
  server_name www.willnorris.com;
  server_name willnorris.net www.willnorris.net;
  return 301 https://willnorris.com$request_uri;

  access_log off;

  ssl_certificate /var/www/willnorris.com/etc/fullchain.pem;
  ssl_certificate_key /var/www/willnorris.com/etc/privkey.pem;
}

# production config for https://willnorris.com/
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name willnorris.com;

  access_log /var/www/willnorris.com/log/access.log combined;
  error_log /var/www/willnorris.com/log/error.log;

  ssl_certificate /var/www/willnorris.com/etc/fullchain.pem;
  ssl_certificate_key /var/www/willnorris.com/etc/privkey.pem;

  # Security related headers
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Xss-Protection "1; mode=block" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Content-Security-Policy "default-src https: data: 'unsafe-inline' 'unsafe-eval'" always;

  root   /var/www/willnorris.com/public;
  index index.html readme.html;
  charset utf-8;

  error_page 403 /errors/403/index.html;
  error_page 404 /errors/404/index.html;
  error_page 500 502 503 504 /errors/500/index.html;
  location ~ ^/errors/ { internal; }

  location = /contact { return 302 "/about#contact"; }
  location = /contact/ { return 302 "/about#contact"; }
  #location = /about/ { return 301 /about; }
  location = /about/resume { return 302 /about; }
  location = /blog { return 302 /; }
  location = /index.php { return 301 /; }
  location = /images/logo.jpg { return 301 /logo.jpg; }
  location = /images/avatars/will.jpg { return 301 /logo.jpg; }
  location = /photo.jpg { return 301 /logo.jpg; }

  # ignore requests for common files that may not exist
  location = /robots.txt  { access_log off; log_not_found off; }
  location = /favicon.ico { access_log off; log_not_found off; }

  # redirect some old WordPress URLs
  location = /feed.atom { return 301 /atom.xml; }
  location = /feed { return 301 /atom.xml; }
  location /feed/ { return 301 /atom.xml; }
  location ~ ^/content/uploads/(.*) { return 301 /$1; }
  location ~ ^/content/(slides/.*) { return 301 /$1; }
  location ~ ^/page/[0-9]+$ { return 302 /archives; }
  location ~ ^(.+)/comment-page-[0-9]+$ { return 301 $1; }
  location ~ ^/(category|search|tag)/(\w+) { return 302 'https://www.google.com/search?as_sitesearch=willnorris.com&q=$2'; }

  # support webfinger lookup (https://wjn.me/b/4XG1)
  location = /.well-known/webfinger {
    if ($request_method !~ ^(GET|HEAD)$) { return 405; }
    set_unescape_uri $resource $arg_resource;
    if ($resource = "") { return 400; }
    if ($resource = "acct:will@willnorris.com")   { rewrite .* /webfinger.json last; }
    if ($resource = "mailto:will@willnorris.com") { rewrite .* /webfinger.json last; }
    if ($resource = "https://willnorris.com")     { rewrite .* /webfinger.json last; }
    if ($resource = "https://willnorris.com/")    { rewrite .* /webfinger.json last; }
  }
  location = /webfinger.json {
    types { application/jrd+json json; }
    add_header Access-Control-Allow-Origin "*";
    add_header X-Robots-Tag "noindex";
  }

  # exact match for home page so it is served as fast as possible (without
  # evaluating the regex locations and such)
  location = / {
    try_files $uri/ =404;
  }

  location / {
    try_files $uri $uri.html $uri/ @gum;
  }

  # /tmp is for publicly accessible tmp files.  It is served out of a different
  # root so jekyll builds don't delete it. (regex match so it takes precedence)
  location ~ ^/tmp/(.*) {
    alias /var/www/willnorris.com/tmp/$1;
    autoindex on;
    autoindex_localtime on;
    add_header X-Robots-Tag "noindex";
  }

  location ~ ^/wiki/ {
    try_files $uri $uri.html $uri/ =404;
    add_header X-Robots-Tag "noindex";
  }

  # allow go subpackages to be fetchable with `go get` (https://wjn.me/b/4_m1)
  location ~ ^/go/\w+/.+ {
    if ($arg_go-get) {
      rewrite ^(/go/\w+/) $1? last;
    }
    try_files $uri $uri.html $uri/ @gum;
  }

  # allow navigating post archives by redirecting date-based URLs
  # like /2015/ or /2015/02/ to /archives#2015.
  location ~ "^/\d{4}/(\d{2}/)?$" {
    rewrite "^/(\d{4})/" /archives#$1 redirect;
  }

  # redirect /content/YYYY/MM to /YYYY/MM
  location ~ "^/content/\d{4}/\d{2}/.+" {
    rewrite "^/content(/.+)" $1 redirect;
  }

  # image proxy (https://wjn.me/b/J_)
  location ~ /api/imageproxy/(.*) {
    return 301 http://imageproxy.willnorris.com/$1;
  }

  # limited proxying for home assistant
  location ^~ /api/home/auth/ {
    proxy_pass https://home.willnorris.net/auth/;
    proxy_http_version 1.1;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }
  location ^~ /api/home/google_assistant {
    proxy_pass https://home.willnorris.net/api/google_assistant;
    proxy_http_version 1.1;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  location ~* \.(js|css|png|jpg|jpeg|gif|ico|woff)$ {
    expires 365d;
  }

  location @gum {
    proxy_pass http://localhost:4594;
    # allow nginx to serve custom error pages
    proxy_intercept_errors on;
  }

  location ^~ /-/ {
    proxy_pass http://localhost:8080/;
  }

  # Proxy webmention requests to webmention.herokuapp.com (https://wjn.me/b/4XT1).
  # This is not included in nginx-shared.conf since it tries to connect to
  # webmention.herokuapp.com on startup which causes problems if the dev server
  # is running offline.
  location = /api/webmention {
    if ($request_method = POST) {
      proxy_pass https://webmention.herokuapp.com;
    }
    try_files $uri $uri.html $uri/ =404;
  }
}
