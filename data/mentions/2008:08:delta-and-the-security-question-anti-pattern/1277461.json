{
  "type": "entry",
  "author": {
    "type": "card",
    "name": "",
    "photo": "",
    "url": ""
  },
  "url": "http://soatok.blog/2021/09/28/the-bi-symmetric-encryption-fraud/",
  "published": null,
  "wm-received": "2021-09-28T11:41:42Z",
  "wm-id": 1277461,
  "wm-source": "http://soatok.blog/2021/09/28/the-bi-symmetric-encryption-fraud/",
  "wm-target": "https://willnorris.com/2008/08/delta-and-the-security-question-anti-pattern/",
  "name": "The Bi-Symmetric Encryption Fraud",
  "content": {
    "html": "<p>Earlier this year I discussed <a href=\"https://soatok.blog/2021/02/09/crackpot-cryptography-and-security-theater/\">some noteworthy examples of crackpot cryptography and snake-oil security</a> on this blog.</p>\n\n\n\n<p>In <em>this</em> post, I’m going to analyze the claims made by <a href=\"https://web.archive.org/web/20210928055236/https://www.cew-s.com/\">CEW Systems Canada</a> about “Post-Quantum Encryption” and argue that their so-called “bi-symmetric encryption” is another example of the same genre of crackpot cryptography.</p>\n\n\n\n\n\n<blockquote>\n<p lang=\"en\" dir=\"ltr\" xml:lang=\"en\">\"if you see fraud and don't say fraud you're fraud\"</p>— JP Aumasson (@veorq) <a href=\"https://twitter.com/veorq/status/1159575230970396672?ref_src=twsrc%5Etfw\">August 8, 2019</a>\n</blockquote>\n\n<p>Let’s get the disclaimers out of the way: This post was written solely by some security engineer with a fursona that has happens to have a lot of opinions about cryptography. This post is solely the opinion of said author, who also claims to be a blue anthropomorphic dhole, and not the opinion of any employer (especially his).</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2020/04/soatok_stickerpack-hacker-1.png?w=512\" alt=\"\" />Credit: <a href=\"https://twitter.com/lynxvsjackalope\">Lynx vs Jackalope</a>.\n\n\n\n<p>It’s entirely up to you whether or not you want to take me seriously, knowing all of that.</p>\n\n\n\n<h2>What Is “Bi-Symmetric Encryption”?</h2>\n\n\n\n<p>CEW Systems,<a href=\"https://web.archive.org/web/20210928081853/https://opencorporates.com/companies/ca/12575825\"> a Canadian company incorporated in December 2020 by Chad Edward Wanless</a>, claims to have developed a technique called “bi-symmetric encryption”, which they describe as follows:</p>\n\n\n\n<blockquote>\n<p><strong>What exactly is Bi-Symmetric encryption?</strong><br /><br />Bi-symmetric encryption is an internet communications handshake protocol that uses public/private keys similar to typical asymmetric encryption, but instead uses an underlying symmetric encryption system as the encryption backbone.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">source</a>)\n</blockquote>\n\n\n\n<p>Their FAQ page goes on to claim:</p>\n\n\n\n<blockquote>\n<p><strong>Why is it called Bi-Symmetric?</strong><br /><br />We chose bi-symmetric encryption as the name because the encryption handshake is a hybrid of both asymmetric and symmetric encryption.  It uses public/private keys just as asymmetric encryption does, while using symmetric encryption called CEW encryption as the underlying encryption software routine.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">source</a>)\n</blockquote>\n\n\n\n<p>Ah, what a contradiction! According to this page, bi-symmetric encryption is a handshake protocol that simultaneously:</p>\n\n\n\n<ul><li>Uses public/private keys just as asymmetric encryption does, but</li>\n<li>Uses an underlying <strong>symmetric</strong> encryption system</li>\n</ul><p>But if your underlying encryption for the handshake is entirely symmetric, where do the asymmetric keypairs come in?</p>\n\n\n\n<p>Asymmetric cryptography has public/private keypairs because their security is based on a hard computational problem (large integer factorization, the elliptic curve discrete logarithm problem, etc.). You can always take a private key and derive its public key, but doing the opposite is prohibitively expensive.</p>\n\n\n\n<p>If you’re only using symmetric cryptography, you don’t have this hard computational problem in the mix, so where do the keypairs come in?</p>\n\n\n\n<p>The FAQ goes on to imply that bi-symmetric encryption is resistant to brute-force attack, and then vaguely describes One-Time Passwords (a.k.a. two-factor authentication codes).</p>\n\n\n\n<blockquote>\n<p>Brute force attacks on an ordinary computer work by incrementally testing possible values until the desired output response is found. For example, if a vehicle was locked and a smart device is used to hack it, the brute force attack would start at 0,000,000 and say, the unlock code was 1,234,678, the device would resend the code incrementally advancing the value by 1. The signals would repeat until the correct value was eventually found and the vehicle unlocked.  Bi-symmetric software works by using a challenge code and test data combination that changes the unlock code for each attempt. Staring at 0,000,000 and incrementing to 9,999,999 would not unlock the vehicle as the unlock could would always be changing with every attempt.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">source</a>)\n</blockquote>\n\n\n\n<p>Even if you’re not a cryptography expert, I hope it’s clear that “synchronized random numbers” (one-time passwords) and “mangling a message so no one else can understand its contents without the key” (symmetric encryption) are totally disparate operations, and not at all interchangeable.</p>\n\n\n\n<p>But here’s where things get really funny. After all this confusing and contradictory bullshit, they say this:</p>\n\n\n\n<blockquote>\n<p>Another reason is that asymmetric encryption relies upon a math formula to determine what the private key is by factoring the public key. <strong>Bi-symmetric encryption does not mathematically correlate the two, instead one is encrypted by the other</strong>.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">source</a>)\n</blockquote>\n\n\n\n<p>Yeah, that concept already exists. It’s called <strong>envelope encryption</strong>, my dudes. There’s nothing magically post-quantum about envelope encryption, and it doesn’t obviate the need for asymmetric cryptography.</p>\n\n\n\n<p>And if both keys are symmetric, and you’re communicating them in the clear, then what’s to stop someone from using the algorithm the same way a legitimate user does?</p>\n\n\n\n<p>Of course, now that we’ve gotten to the meaty center, the remainder of the FAQ entry is the other half of the bullshit sandwich.</p>\n\n\n\n<blockquote>\n<p>The largest reason asymmetric encryption is vulnerable is that the entire plain text being encrypted is mathematically modified using a math formula.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">source</a>)\n</blockquote>\n\n\n\n<p>What are they even talking about?</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2021/07/neophyte-confused.png?w=409\" alt=\"\" />Credit: <a href=\"https://linktr.ee/Harubaki\">Harubaki</a>.\n\n\n\n<p>There are a lot of problems with asymmetric encryption. For example: Developers <a href=\"https://soatok.blog/2021/01/20/please-stop-encrypting-with-rsa-directly/\">encrypting directly with RSA</a>. This is an antipattern that I’ve complained about before.</p>\n\n\n\n<p>But asymmetric encryption isn’t, as a whole, “vulnerable” to anything.</p>\n\n\n\n<p>The reason NIST and other standards organizations are focused on post-quantum cryptography is that the currently-deployed asymmetric cryptographic algorithms (RSA, ECC) are broken by a quantum computer (if it ever exists). The solution is to study and standardize <em>better</em> asymmetric algorithms, not throw out the entire class of algorithms, forever.</p>\n\n\n\n<p>The fact that quantum computers break RSA and ECC has nothing to do with “the entire plain text being encrypted”, as CEW Systems claims, because that’s generally not what’s actually happening.</p>\n\n\n\n<p>If you use TLS 1.2 or 1.3 to connect to a website, one of the following things is happening:</p>\n\n\n\n<ol><li>You have an existing session, no handshake needed.</li>\n<li>Your browser and the webserver use <a href=\"https://soatok.blog/2020/04/21/elliptic-curve-diffie-hellman-for-humans-and-furries/\">Elliptic Curve Diffie-Hellman</a> to establish a session key. The server’s ephemeral public key is signed by the ECDSA or RSA key in their Certificate, which has been signed by a Certificate Authority independently trusted by the browser and/or operating system you use.</li>\n<li>Your browser encrypts a random value, called the pre-master secret, using the RSA Public Key on the Certificate. The pre-master secret is used by the server to derive the session key for subsequent connections. This doesn’t have forward secrecy like option 2 does, but it’s otherwise secure.</li>\n</ol><p>At no point is “the plain text” ever encrypted directly. The ECC option <a href=\"https://eprint.iacr.org/2012/064\">doesn’t even <em>do</em> asymmetric encryption</a> the same way RSA does. ECC is used for key agreement, exclusively.</p>\n\n\n\n<p>Understanding the basics of “how cryptography is used” is table stakes for even thinking about inventing your own cryptography, and CEW Systems cannot even clear <em>that</em> bar.</p>\n\n\n\n<blockquote>\n<p>With the under lying encryption of bi-symmetric, each individual letter is modified separately, there is no mathematical link to the entire plain text being encrypted.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">source</a>)\n</blockquote>\n\n\n\n\n<span style=\"text-align:center;\"></span>\n<p>The charitable interpretation is that they’re describing a stream cipher, or a block cipher used in Counter Mode.</p>\n\n\n\n<p>A more likely interpretation is that they’re encrypting each letter independently in something like ECB mode, which offers no semantic security.</p>\n\n\n\n<img src=\"https://imgs.xkcd.com/comics/code_talkers.png\" alt=\"\" />Credit: <a href=\"https://xkcd.com/257/\">XKCD</a>\n\n\n\n<p>The less charitable interpretation is reinforced by this image included in their FAQ page that archive.org did not successfully capture:</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2021/09/cew-systems-database-table.png?w=600\" alt=\"\" />Image taken <a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">from this page</a> but with colors inverted to better suit my blog’s theme.\n\n\n\n<p>This obsession over big key sizes is oddly reminiscent of the <a href=\"https://www.kickstarter.com/projects/datagatekeeper/datagatekeeper-the-first-impenetrable-anti-hacking\">DataGateKeeper scam on KickStarter in 2016</a>.</p>\n\n\n\n<p>The about page further cements the insanity of their proposal:</p>\n\n\n\n<blockquote>\n<p>This encryption method is a hybridization of asymmetric public/private keys combined with symmetric encryption to modify each character individually and not the data packets.</p>\n(<a href=\"https://web.archive.org/web/20210928102839/https://www.cew-s.com/about\">source</a>)\n</blockquote>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2020/09/soatoktelegrams2020-11.png?w=512\" alt=\"\" />Credit: <a href=\"https://twitter.com/lynxvsjackalope\">Lynx vs Jackalope</a>.\n\n\n\n<p>Moving on…</p>\n\n\n\n<blockquote>\n<p>A great example that demonstrates how bi-symmetric encryption works: If one were to encrypt, for example, a credit card number, a brute force attack would produce every possible credit card number between 0000 0000 0000 0000 and 9999 9999 9999 9999 with no means to determine which output would be the correct value.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq\">source</a>)\n</blockquote>\n\n\n\n<p>This just in! Crackpot company that claims to have solved post-quantum cryptography using only symmetric cryptography also hasn’t heard of <a href=\"https://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken\">authenticated encryption</a>. Film at 11.</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2020/09/soatoktelegrams2020-09.png?w=512\" alt=\"Grrrr\" />Credit: <a href=\"https://twitter.com/lynxvsjackalope\">Lynx vs Jackalope</a>\n\n\n\n<p>It’s frustrating to read bold claims from someone who flunks the fundamentals. </p>\n\n\n\n<p>Credit Card Numbers adhere to <a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\">the Luhn Algorithm</a>, so an attacker isn’t going to even bother with 90% of the possible card numbers in their brute force range. </p>\n\n\n\n<p>(Because of the Luhn Algorithm, there is only one valid checksum value, stored as the last digit, for any given combination of the first 15 digits, which is a 10x speedup in guessing. This mostly exists to detect typos before sending a payment request to the bank. Also not every credit card number is a full 16 digits; they can be as short as 13 or as long as 19.)</p>\n\n\n\n<p>Also, for posterity, here’s my actual credit card number, encrypted with a 256-bit random key with a scheme that exists and is widely deployed today (n.b. <strong>NOT</strong> their snake-oil). <a href=\"https://pthree.org/2016/06/19/the-physics-of-brute-force/\">You ain’t gonna brute force it</a>.</p>\n\n\n<pre title=\"\">\n42a0d7af9ace893289ae4bd86d62c604ab1fa708f1063172777be695\n11fa01d4af5027ad55a15166b49f6861c825fd026fba00f4eecc1a67\n</pre>\n\n\n<h3>TL;DR</h3>\n\n\n\n<p>In short, <strong>bi-symmetric encryption</strong> is the term CEW Systems uses to describe their crackpot cryptographic algorithm that is, allegedly, simultaneously a one-time password algorithm and an envelope encryption algorithm, which involves public/private keys but doesn’t involve an asymmetric mathematical problem that calls for mathematically related keys.</p>\n\n\n\n<p>This contradictory and convoluted definition is almost certainly intended to confuse people who don’t understand advanced mathematics while sounding convincing and confident. It’s bullshit, plain and simple.</p>\n\n\n\n<h2>More Crackpot Claims</h2>\n\n\n\n<p>If you feel like you haven’t suffered enough, the team behind “bi-symmetric encryption” goes on to make claims about password protection.</p>\n\n\n\n<p>Because of course they do.</p>\n\n\n\n<blockquote>\n<p><strong>Password Protection</strong><br />CEW systems has given great thought to how to protect users’ passwords. As noted in the man-in-the-middle attack, passwords are combined with unique identifying data from users’ computers or smart devices, such as serial numbers, before being modified into encryption keys.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq#comp-k78i9idk\">source</a>)\n</blockquote>\n\n\n\n<p>Wrong. So wrong.</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2020/04/computeranger.png?w=224\" alt=\"Soatok angrily grasping computer monitor\" width=\"224\" height=\"224\" />Credit: <a href=\"https://twitter.com/Swizzlestixick\">Swizz</a>\n\n\n\n<p>Password hashing and password-authenticated key exchanges are an entire discipline that I don’t want to delve into in this post, but passwords are salted and stretched with a computationally difficult symmetric algorithm (<a href=\"https://soatok.blog/2021/08/24/programmers-dont-understand-hash-functions/#password-hashing-functions\">usually a password hashing function</a>), especially when they’re being used to derive encryption keys.</p>\n\n\n\n<p>There are schemes that use TPMs or secure enclaves to produce key material from a given password, but that doesn’t rely on a “serial number” the way they’re implying.</p>\n\n\n\n<blockquote>\n<p>Additionally, CEW systems created a patent pending and copyrighted custom user interface password edit box. This new user interface tool displays a dropdown window that contains “Forgot Password”, “Change Password” buttons and a phishing email warning tip window that informs and reminds users that the only means by which to change the password is through the software they are currently using.</p>\n(<a href=\"https://web.archive.org/web/20210928061409/https://www.cew-s.com/faq#comp-k78i9idk\">source</a>)\n</blockquote>\n\n\n\n<p>That is a lot of, well, something. Good luck getting a patent awarded on something that almost every corporate intranet has implemented since <em>Hackers</em> came out in 1995.</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2021/09/cew-systems-passwordwarningdropdown.png?w=170\" alt=\"\" />Patent Pending on <em>this</em>? Prior art, yo.\n\n\n\n<p>I’m also deeply curious how they propose to implement <a href=\"https://paragonie.com/blog/2016/09/untangling-forget-me-knot-secure-account-recovery-made-simple\">account recovery</a> in their systems for when a users forgets their password.</p>\n\n\n\n<p>If anyone reading this ever finds themselves making security decisions for a company, warning labels like this are not effective at all. A much better solution to phishing (and weak passwords, while we’re talking about it) is <a href=\"https://webauthn.guide/\">WebAuthn</a> with hardware security keys (i.e. <a href=\"https://solokeys.com\">Solo V2</a>).</p>\n\n\n\n<h2>Establishing Fraud</h2>\n\n\n\n<p>Hanlon’s Razor is an adage that states, “<strong>Never attribute to malice that which is adequately explained by stupidity</strong>“.</p>\n\n\n\n<p>To call something fraudulent, it’s not sufficient to merely conclude that they have crackpot ideas (which would be stupid), you also have to demonstrate deception (which is a form of malice).</p>\n\n\n\n<p>In the previous section, we’ve looked at enough evidence to justify calling bi-directional encryption an instance of crackpot cryptography. But when does it stop being overconfidence and start becoming a grift? </p>\n\n\n\n<p>I submit to you that the line of demarcation is when a crackpot attempts to gain money, fame, notoriety, or a reputational lift for their crackpot idea.</p>\n\n\n\n<p>To begin, let’s look at some red flags on the CEW Systems website. Then let’s dive a little bit deeper and see what we can dredge up from the Internet.</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2020/09/soatoktelegrams2020-15.png?w=512\" alt=\"\" />Credit: <a href=\"https://twitter.com/lynxvsjackalope\">Lynx vs Jackalope</a>\n\n\n\n<h3>Red Flags</h3>\n\n\n\n<h4>CTO Report</h4>\n\n\n\n<p>The front page of the CEW Systems website claims to have a “Third Party Academic Independent Review” from Dr. Cyril Coupal from Saskatchewan Polytechnic’s <a href=\"https://saskpolytech.ca/about/applied-research-and-innovation/dice/\">Digital Integration Centre of Excellence</a>.</p>\n\n\n\n<p>Immediately after this claim, the website states:</p>\n\n\n\n<blockquote>\n<p>Dr. Cyril Coupal’s CTO report currently can be made available to those who have signed a Non-Disclosure Agreement.</p>\n(<a href=\"https://web.archive.org/web/20210928055236/https://www.cew-s.com/\">source</a>)\n</blockquote>\n\n\n\n<p>Let me tell ya, as a security engineer, I’m used to dealing with Non-Disclosure Agreements. NDAs are almost always a prerequisite for getting contracted to review a company’s source code or conduct a penetration test on their networks.</p>\n\n\n\n<p>Almost nobody working in cryptography today would ever sign an NDA in order to read a third-party academic review of any cryptographic system. That’s bonkers.</p>\n\n\n\n<p>In fact, you don’t need to sign anything: Simply navigate to <strong><a href=\"https://web.archive.org/web/20210928101940/https://www.cew-s.com/software-tools\">Software Tools</a></strong>, then click <strong><a href=\"https://web.archive.org/web/20210928101915/https://www.cew-s.com/papers\">Papers</a></strong> at the bottom, and you can download it directly from their website.</p>\n\n\n\n<p>Here’s <a href=\"https://soatok.files.wordpress.com/2021/09/cew-systems-review.pdf\">a mirrored copy of this “CTO Report” (PDF)</a>.</p>\n\n\n\n<h4>The “How It Works” Page</h4>\n\n\n\n<p>A common tactic of scammers and frauds is to sponsor a talk at a prestigious conference and then use the film of your talk at said conference to artificially inflate the credibility of your claims.</p>\n\n\n\n<p>This is what we saw <a href=\"https://soatok.blog/2021/02/09/crackpot-cryptography-and-security-theater/\">with TimeAI at Black Hat</a>.</p>\n\n\n\n<p>CEW Systems took <a href=\"https://web.archive.org/web/20210928064457/https://www.cew-s.com/how-it-works\">a different route</a> than Crown Sterling:</p>\n\n\n\n<p>They joined with two other companies (Uzado, Terranova) to form the so-called TCU Alliance in February 2020 (<a href=\"https://web.archive.org/web/20210303232301/https://www.cew-s.com/media\">source</a>), then invited a Constable from the Toronto Police Department’s E3 Cyber Security Division) to deliver a talk and give legitimacy to their accompanying talk (<a href=\"https://web.archive.org/web/20210928103642/https://www.youtube.com/watch?v=wcpFhyPTaMI\">archived</a>).</p>\n\n\n\n<p>Interestingly, their page about this TCU Alliance also states:</p>\n\n\n\n<blockquote>\n<p>This alliance came together during 2020; while bidding on government proposals being issued by the Innovation for Defense Excellence and Security (IDEaS) proposals.</p>\n(<a href=\"https://web.archive.org/web/20210303232301/https://www.cew-s.com/media\">source</a>)\n</blockquote>\n\n\n\n<p>This detail alone is sufficient in establishing the financial incentives needed to claim “fraud”. They’re out to win government contracts.</p>\n\n\n\n<h4>Time What Is Time?</h4>\n\n\n\n<p>CEW Systems was <a href=\"https://web.archive.org/web/20210928081853/https://opencorporates.com/companies/ca/12575825\">incorporated in December 2020</a>. However, their FAQ page states December 2019 and Chad Wanless’s LinkedIn page (<a href=\"https://soatok.files.wordpress.com/2021/09/cew-linkedin-profile.pdf\">PDF</a>) claims 2017. The copyright year on their website states 2023.</p>\n\n\n\n<p>If you cannot reasonably establish the history and timeline of the company you’re talking to, they’re probably up to no good.</p>\n\n\n\n<h3>Is It Really Fraud?</h3>\n\n\n\n<p>Aside from the abundant red flags, and the establishment of financial incentives, and the convoluted claims about the company’s timeline, the other significant modicum of evidence for fraud isn’t found on the CEW Systems website.</p>\n\n\n\n<p>Rather, it’s kind of meta.</p>\n\n\n\n<p>The entire reason that I’m writing about this at all is because CEW Systems pitched their crackpot cryptography to a startup, which led one of their employees to ask their friends about cryptography, which led to me being alerted to the existence of CEW Systems and their so-called “bi-symmetric encryption” in the first place.</p>\n\n\n\n<p>Crackpot ideas are stupid; trying to sell your crackpot ideas to others is fraud.</p>\n\n\n\n<p>I don’t know if it was desperation or greed, but they tried to sell their crackpot product to an audience with someone attending that was <em>just clueful enough</em> to realize that something’s amiss. If they hadn’t been trying to sell their crackpot ideas, I would never have even heard of them.</p>\n\n\n\n<p>When you add those facts together, I can only conclude that bi-symmetric encryption is a fraud being perpetuated by Chad Wanless of CEW Systems in Canada.</p>\n\n\n\n<h2>What Did Dr. Coupal Reveal?</h2>\n\n\n\n<p>If you recall, CWE Systems erroneously <a href=\"https://soatok.files.wordpress.com/2021/09/cew-systems-review.pdf\">leaked</a> the same “CTO Report” that they claimed would only be made available to parties that agreed to their Non-Disclosure Agreement.</p>\n\n\n\n<p>I’d like to take this opportunity to annotate some of the interesting revelations from Dr. Cyril Coupal’s report. <a href=\"https://soatok.blog/2021/09/28/the-bi-symmetric-encryption-fraud/#conclusion\">Feel free to skip this section if you aren’t interested.</a></p>\n\n\n\n<h3>The Analysis Was “Short”</h3>\n\n\n\n<p>The introduction of the CTO report states:</p>\n\n\n\n<blockquote><p>CEW Systems Canada Inc. has asked the Saskatchewan Polytechnic Digital Integration Centre of Excellence (DICE) group to perform a short CTO-funded analysis on their Bi-Symmetric Hybrid Encryption System.</p></blockquote>\n\n\n\n<p>I don’t know what “short CTO-funded analysis” (a unique phrase that doesn’t exist online outside the context of CEW Systems) even means, but any short analysis is unlikely to be a careful one.</p>\n\n\n\n<h3>How the “Encryption” is Achieved</h3>\n\n\n\n<p>The bottom of page 1 (<strong>Overview of the Approach</strong>) states:</p>\n\n\n\n<blockquote><p>The encryption itself is achieved by randomly generating keys and interweaving them with portions of unencrypted data to be transmitted, applied to single bytes of data rather than long byte collections.</p></blockquote>\n\n\n\n<p>This is basically how the broken stream cipher, RC4, was designed. There’s not much novel to say about this. RC4 sucked.</p>\n\n\n\n<h3>Misleading Scale</h3>\n\n\n\n<p>The top of page 4 contains this gem of deception:</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2021/09/bisymmetricencryption-report-bruteforcecurve.png?w=795\" alt=\"\" />\n\n\n\n<p>Two things: </p>\n\n\n\n<ol><li>This should really use a logarithmic scale.</li>\n<li>The powers of 2 being discussed are small potatoes. If you’re trying to factor 2048-bit numbers, your X axis needs to extend way past 30.</li>\n</ol><p>I’m honestly not sure if this is because the author was in a rush, or if they’re in on the scam. I sent an email and will update this post when I have any further light to shed on this matter.</p>\n\n\n\n<h3>Trusted Setup Required</h3>\n\n\n\n<p>Towards the bottom of page 8 (under the heading: <strong>What about initial secret exchange and account setup?</strong>) states:</p>\n\n\n\n<blockquote><p>Common secrets, known to both server and client, must be exchanged when initial set up of accounts is made. Various methods exist to do this, but most involve the human factor, which is dangerous.</p></blockquote>\n\n\n\n<p>Way to bury the lede! I can already devise and deploy purely symmetric system that requires pre-shared keys <em>today</em>. That doesn’t make such a system practical or reliable.</p>\n\n\n\n<h3>Revenge of the Immortal Security Questions</h3>\n\n\n\n<p>At the top of page 10, Dr. Coupal was kind enough to include a screenshot titled “Forgot Password Example” which shows the breathtaking cluelessness of CEW Systems.</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2021/09/bisymmetricencryption-forgotpassword.png?w=369\" alt=\"\" />\n\n\n\n<p>Security questions are an <a href=\"https://willnorris.com/2008/08/delta-and-the-security-question-anti-pattern/\">anti-pattern</a>. There are better mechanisms available. Why would anyone intentionally design a new system that uses password-equivalents that users don’t realize are as sensitive as their actual passwords? </p>\n\n\n\n<p>It doesn’t matter how you’re encrypting the answers if they can be leaked from third party apps, and are rarely (if ever) revoked.</p>\n\n\n\n<h3>Cursed User Interface</h3>\n\n\n\n<p>Just look at this monstrosity.</p>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2021/09/bisymmetricencryption-cursedui.png?w=847\" alt=\"\" /><p>This is absolutely <a href=\"https://qz.com/679782/programmers-imagine-the-most-ridiculous-ways-to-input-a-phone-number/\">cursed</a>.</p>\n\n\n\n<h3>The Smoking Gun</h3>\n\n\n\n<p>The entire discipline of Cryptography has a tenet called Kerckhoffs’s Principle: a cryptosystem should be secure, even if everything about the system, except the key, is public knowledge.</p>\n\n\n\n<p>At the bottom of page 11 of the CTO Report, Dr. Coupal states:</p>\n\n\n\n<blockquote>\n<p><strong>The implementation algorithms cannot be open source.</strong><br /><br />Knowing the procedures would aid in hacking the keys, therefore, the actual implementation of the algorithms, as well as the algorithms themselves, must be kept secret. <strong>The interweaving protocol is not mathematically based, but procedurally based.</strong> Of course, the data secrets for each client-server interchange must also be known, which is highly unlikely. CEW has many protocols in place to keep their application code secure. However, this may cause difficulty in obtaining certification by security agencies if they cannot inspect the code for security issues and thoroughness. Finally, it is not currently known how easy it would be to reverse engineer a copy of the executable code.</p>\n(Emphasis mine.)\n</blockquote>\n\n\n\n<img src=\"https://soatok.files.wordpress.com/2020/08/soatoktelegrams2020-04.png?w=512\" alt=\"\" />Credit: <a href=\"https://twitter.com/lynxvsjackalope\">Lynx vs Jackalope</a>\n\n\n\n<h2>In Conclusion</h2>\n\n\n\n<p>While cryptographic snake-oil salesmen aren’t peddling sex lube, they’ll be quick to fuck you just the same.</p>\n\n\n\n<p>In this author’s opinion, “Bi-Symmetric Encryption” is a crackpot fraud, just like MyDataAngel, TimeAI, Crown Sterling, and so many other bullshit products and services before them. Don’t give them any money.</p>\n\n\n\n<p>This story has a silver lining: Someone who felt something was amiss spoke up and the fraud was thus detected.</p>\n\n\n\n<p>As <a href=\"https://twitter.com/SwiftOnSecurity\">@SwiftOnSecurity</a> is quick to remind us when discussing their history as a Help Desk worker, your users are your first line of defense against security threats. They’ll be exposed to bullshit that you never will. (Chad Wanless never posted a paper on IACR’s <a href=\"https://eprint.iacr.org/\">ePrint</a>, after all.)</p>\n\n\n<h3>Share this:</h3>\n<ul><li><a href=\"https://soatok.blog/2021/09/28/the-bi-symmetric-encryption-fraud/?share=twitter\" title=\"Click to share on Twitter\"><span>Twitter</span></a></li>\n<li><a href=\"https://soatok.blog/2021/09/28/the-bi-symmetric-encryption-fraud/?share=facebook\" title=\"Click to share on Facebook\"><span>Facebook</span></a></li>\n<li>\n</li></ul>\n\n\n<h3>Like this:</h3>\n\n<span><span>Like</span></span> <span>Loading...</span>\n\n<span></span><a></a>\n\n\n\t<h3><em>Related</em></h3>",
    "text": "Earlier this year I discussed some noteworthy examples of crackpot cryptography and snake-oil security on this blog.\n\n\n\nIn this post, I’m going to analyze the claims made by CEW Systems Canada about “Post-Quantum Encryption” and argue that their so-called “bi-symmetric encryption” is another example of the same genre of crackpot cryptography.\n\n\n\n\n\n\n\"if you see fraud and don't say fraud you're fraud\"— JP Aumasson (@veorq) August 8, 2019\n\n\nLet’s get the disclaimers out of the way: This post was written solely by some security engineer with a fursona that has happens to have a lot of opinions about cryptography. This post is solely the opinion of said author, who also claims to be a blue anthropomorphic dhole, and not the opinion of any employer (especially his).\n\n\n\nCredit: Lynx vs Jackalope.\n\n\n\nIt’s entirely up to you whether or not you want to take me seriously, knowing all of that.\n\n\n\nWhat Is “Bi-Symmetric Encryption”?\n\n\n\nCEW Systems, a Canadian company incorporated in December 2020 by Chad Edward Wanless, claims to have developed a technique called “bi-symmetric encryption”, which they describe as follows:\n\n\n\n\nWhat exactly is Bi-Symmetric encryption?\n\nBi-symmetric encryption is an internet communications handshake protocol that uses public/private keys similar to typical asymmetric encryption, but instead uses an underlying symmetric encryption system as the encryption backbone.\n(source)\n\n\n\n\nTheir FAQ page goes on to claim:\n\n\n\n\nWhy is it called Bi-Symmetric?\n\nWe chose bi-symmetric encryption as the name because the encryption handshake is a hybrid of both asymmetric and symmetric encryption.  It uses public/private keys just as asymmetric encryption does, while using symmetric encryption called CEW encryption as the underlying encryption software routine.\n(source)\n\n\n\n\nAh, what a contradiction! According to this page, bi-symmetric encryption is a handshake protocol that simultaneously:\n\n\n\nUses public/private keys just as asymmetric encryption does, but\nUses an underlying symmetric encryption system\nBut if your underlying encryption for the handshake is entirely symmetric, where do the asymmetric keypairs come in?\n\n\n\nAsymmetric cryptography has public/private keypairs because their security is based on a hard computational problem (large integer factorization, the elliptic curve discrete logarithm problem, etc.). You can always take a private key and derive its public key, but doing the opposite is prohibitively expensive.\n\n\n\nIf you’re only using symmetric cryptography, you don’t have this hard computational problem in the mix, so where do the keypairs come in?\n\n\n\nThe FAQ goes on to imply that bi-symmetric encryption is resistant to brute-force attack, and then vaguely describes One-Time Passwords (a.k.a. two-factor authentication codes).\n\n\n\n\nBrute force attacks on an ordinary computer work by incrementally testing possible values until the desired output response is found. For example, if a vehicle was locked and a smart device is used to hack it, the brute force attack would start at 0,000,000 and say, the unlock code was 1,234,678, the device would resend the code incrementally advancing the value by 1. The signals would repeat until the correct value was eventually found and the vehicle unlocked.  Bi-symmetric software works by using a challenge code and test data combination that changes the unlock code for each attempt. Staring at 0,000,000 and incrementing to 9,999,999 would not unlock the vehicle as the unlock could would always be changing with every attempt.\n(source)\n\n\n\n\nEven if you’re not a cryptography expert, I hope it’s clear that “synchronized random numbers” (one-time passwords) and “mangling a message so no one else can understand its contents without the key” (symmetric encryption) are totally disparate operations, and not at all interchangeable.\n\n\n\nBut here’s where things get really funny. After all this confusing and contradictory bullshit, they say this:\n\n\n\n\nAnother reason is that asymmetric encryption relies upon a math formula to determine what the private key is by factoring the public key. Bi-symmetric encryption does not mathematically correlate the two, instead one is encrypted by the other.\n(source)\n\n\n\n\nYeah, that concept already exists. It’s called envelope encryption, my dudes. There’s nothing magically post-quantum about envelope encryption, and it doesn’t obviate the need for asymmetric cryptography.\n\n\n\nAnd if both keys are symmetric, and you’re communicating them in the clear, then what’s to stop someone from using the algorithm the same way a legitimate user does?\n\n\n\nOf course, now that we’ve gotten to the meaty center, the remainder of the FAQ entry is the other half of the bullshit sandwich.\n\n\n\n\nThe largest reason asymmetric encryption is vulnerable is that the entire plain text being encrypted is mathematically modified using a math formula.\n(source)\n\n\n\n\nWhat are they even talking about?\n\n\n\nCredit: Harubaki.\n\n\n\nThere are a lot of problems with asymmetric encryption. For example: Developers encrypting directly with RSA. This is an antipattern that I’ve complained about before.\n\n\n\nBut asymmetric encryption isn’t, as a whole, “vulnerable” to anything.\n\n\n\nThe reason NIST and other standards organizations are focused on post-quantum cryptography is that the currently-deployed asymmetric cryptographic algorithms (RSA, ECC) are broken by a quantum computer (if it ever exists). The solution is to study and standardize better asymmetric algorithms, not throw out the entire class of algorithms, forever.\n\n\n\nThe fact that quantum computers break RSA and ECC has nothing to do with “the entire plain text being encrypted”, as CEW Systems claims, because that’s generally not what’s actually happening.\n\n\n\nIf you use TLS 1.2 or 1.3 to connect to a website, one of the following things is happening:\n\n\n\nYou have an existing session, no handshake needed.\nYour browser and the webserver use Elliptic Curve Diffie-Hellman to establish a session key. The server’s ephemeral public key is signed by the ECDSA or RSA key in their Certificate, which has been signed by a Certificate Authority independently trusted by the browser and/or operating system you use.\nYour browser encrypts a random value, called the pre-master secret, using the RSA Public Key on the Certificate. The pre-master secret is used by the server to derive the session key for subsequent connections. This doesn’t have forward secrecy like option 2 does, but it’s otherwise secure.\nAt no point is “the plain text” ever encrypted directly. The ECC option doesn’t even do asymmetric encryption the same way RSA does. ECC is used for key agreement, exclusively.\n\n\n\nUnderstanding the basics of “how cryptography is used” is table stakes for even thinking about inventing your own cryptography, and CEW Systems cannot even clear that bar.\n\n\n\n\nWith the under lying encryption of bi-symmetric, each individual letter is modified separately, there is no mathematical link to the entire plain text being encrypted.\n(source)\n\n\n\n\n\n\nThe charitable interpretation is that they’re describing a stream cipher, or a block cipher used in Counter Mode.\n\n\n\nA more likely interpretation is that they’re encrypting each letter independently in something like ECB mode, which offers no semantic security.\n\n\n\nCredit: XKCD\n\n\n\nThe less charitable interpretation is reinforced by this image included in their FAQ page that archive.org did not successfully capture:\n\n\n\nImage taken from this page but with colors inverted to better suit my blog’s theme.\n\n\n\nThis obsession over big key sizes is oddly reminiscent of the DataGateKeeper scam on KickStarter in 2016.\n\n\n\nThe about page further cements the insanity of their proposal:\n\n\n\n\nThis encryption method is a hybridization of asymmetric public/private keys combined with symmetric encryption to modify each character individually and not the data packets.\n(source)\n\n\n\n\nCredit: Lynx vs Jackalope.\n\n\n\nMoving on…\n\n\n\n\nA great example that demonstrates how bi-symmetric encryption works: If one were to encrypt, for example, a credit card number, a brute force attack would produce every possible credit card number between 0000 0000 0000 0000 and 9999 9999 9999 9999 with no means to determine which output would be the correct value.\n(source)\n\n\n\n\nThis just in! Crackpot company that claims to have solved post-quantum cryptography using only symmetric cryptography also hasn’t heard of authenticated encryption. Film at 11.\n\n\n\nCredit: Lynx vs Jackalope\n\n\n\nIt’s frustrating to read bold claims from someone who flunks the fundamentals. \n\n\n\nCredit Card Numbers adhere to the Luhn Algorithm, so an attacker isn’t going to even bother with 90% of the possible card numbers in their brute force range. \n\n\n\n(Because of the Luhn Algorithm, there is only one valid checksum value, stored as the last digit, for any given combination of the first 15 digits, which is a 10x speedup in guessing. This mostly exists to detect typos before sending a payment request to the bank. Also not every credit card number is a full 16 digits; they can be as short as 13 or as long as 19.)\n\n\n\nAlso, for posterity, here’s my actual credit card number, encrypted with a 256-bit random key with a scheme that exists and is widely deployed today (n.b. NOT their snake-oil). You ain’t gonna brute force it.\n\n\n\n42a0d7af9ace893289ae4bd86d62c604ab1fa708f1063172777be695\n11fa01d4af5027ad55a15166b49f6861c825fd026fba00f4eecc1a67\n\n\n\nTL;DR\n\n\n\nIn short, bi-symmetric encryption is the term CEW Systems uses to describe their crackpot cryptographic algorithm that is, allegedly, simultaneously a one-time password algorithm and an envelope encryption algorithm, which involves public/private keys but doesn’t involve an asymmetric mathematical problem that calls for mathematically related keys.\n\n\n\nThis contradictory and convoluted definition is almost certainly intended to confuse people who don’t understand advanced mathematics while sounding convincing and confident. It’s bullshit, plain and simple.\n\n\n\nMore Crackpot Claims\n\n\n\nIf you feel like you haven’t suffered enough, the team behind “bi-symmetric encryption” goes on to make claims about password protection.\n\n\n\nBecause of course they do.\n\n\n\n\nPassword Protection\nCEW systems has given great thought to how to protect users’ passwords. As noted in the man-in-the-middle attack, passwords are combined with unique identifying data from users’ computers or smart devices, such as serial numbers, before being modified into encryption keys.\n(source)\n\n\n\n\nWrong. So wrong.\n\n\n\nCredit: Swizz\n\n\n\nPassword hashing and password-authenticated key exchanges are an entire discipline that I don’t want to delve into in this post, but passwords are salted and stretched with a computationally difficult symmetric algorithm (usually a password hashing function), especially when they’re being used to derive encryption keys.\n\n\n\nThere are schemes that use TPMs or secure enclaves to produce key material from a given password, but that doesn’t rely on a “serial number” the way they’re implying.\n\n\n\n\nAdditionally, CEW systems created a patent pending and copyrighted custom user interface password edit box. This new user interface tool displays a dropdown window that contains “Forgot Password”, “Change Password” buttons and a phishing email warning tip window that informs and reminds users that the only means by which to change the password is through the software they are currently using.\n(source)\n\n\n\n\nThat is a lot of, well, something. Good luck getting a patent awarded on something that almost every corporate intranet has implemented since Hackers came out in 1995.\n\n\n\nPatent Pending on this? Prior art, yo.\n\n\n\nI’m also deeply curious how they propose to implement account recovery in their systems for when a users forgets their password.\n\n\n\nIf anyone reading this ever finds themselves making security decisions for a company, warning labels like this are not effective at all. A much better solution to phishing (and weak passwords, while we’re talking about it) is WebAuthn with hardware security keys (i.e. Solo V2).\n\n\n\nEstablishing Fraud\n\n\n\nHanlon’s Razor is an adage that states, “Never attribute to malice that which is adequately explained by stupidity“.\n\n\n\nTo call something fraudulent, it’s not sufficient to merely conclude that they have crackpot ideas (which would be stupid), you also have to demonstrate deception (which is a form of malice).\n\n\n\nIn the previous section, we’ve looked at enough evidence to justify calling bi-directional encryption an instance of crackpot cryptography. But when does it stop being overconfidence and start becoming a grift? \n\n\n\nI submit to you that the line of demarcation is when a crackpot attempts to gain money, fame, notoriety, or a reputational lift for their crackpot idea.\n\n\n\nTo begin, let’s look at some red flags on the CEW Systems website. Then let’s dive a little bit deeper and see what we can dredge up from the Internet.\n\n\n\nCredit: Lynx vs Jackalope\n\n\n\nRed Flags\n\n\n\nCTO Report\n\n\n\nThe front page of the CEW Systems website claims to have a “Third Party Academic Independent Review” from Dr. Cyril Coupal from Saskatchewan Polytechnic’s Digital Integration Centre of Excellence.\n\n\n\nImmediately after this claim, the website states:\n\n\n\n\nDr. Cyril Coupal’s CTO report currently can be made available to those who have signed a Non-Disclosure Agreement.\n(source)\n\n\n\n\nLet me tell ya, as a security engineer, I’m used to dealing with Non-Disclosure Agreements. NDAs are almost always a prerequisite for getting contracted to review a company’s source code or conduct a penetration test on their networks.\n\n\n\nAlmost nobody working in cryptography today would ever sign an NDA in order to read a third-party academic review of any cryptographic system. That’s bonkers.\n\n\n\nIn fact, you don’t need to sign anything: Simply navigate to Software Tools, then click Papers at the bottom, and you can download it directly from their website.\n\n\n\nHere’s a mirrored copy of this “CTO Report” (PDF).\n\n\n\nThe “How It Works” Page\n\n\n\nA common tactic of scammers and frauds is to sponsor a talk at a prestigious conference and then use the film of your talk at said conference to artificially inflate the credibility of your claims.\n\n\n\nThis is what we saw with TimeAI at Black Hat.\n\n\n\nCEW Systems took a different route than Crown Sterling:\n\n\n\nThey joined with two other companies (Uzado, Terranova) to form the so-called TCU Alliance in February 2020 (source), then invited a Constable from the Toronto Police Department’s E3 Cyber Security Division) to deliver a talk and give legitimacy to their accompanying talk (archived).\n\n\n\nInterestingly, their page about this TCU Alliance also states:\n\n\n\n\nThis alliance came together during 2020; while bidding on government proposals being issued by the Innovation for Defense Excellence and Security (IDEaS) proposals.\n(source)\n\n\n\n\nThis detail alone is sufficient in establishing the financial incentives needed to claim “fraud”. They’re out to win government contracts.\n\n\n\nTime What Is Time?\n\n\n\nCEW Systems was incorporated in December 2020. However, their FAQ page states December 2019 and Chad Wanless’s LinkedIn page (PDF) claims 2017. The copyright year on their website states 2023.\n\n\n\nIf you cannot reasonably establish the history and timeline of the company you’re talking to, they’re probably up to no good.\n\n\n\nIs It Really Fraud?\n\n\n\nAside from the abundant red flags, and the establishment of financial incentives, and the convoluted claims about the company’s timeline, the other significant modicum of evidence for fraud isn’t found on the CEW Systems website.\n\n\n\nRather, it’s kind of meta.\n\n\n\nThe entire reason that I’m writing about this at all is because CEW Systems pitched their crackpot cryptography to a startup, which led one of their employees to ask their friends about cryptography, which led to me being alerted to the existence of CEW Systems and their so-called “bi-symmetric encryption” in the first place.\n\n\n\nCrackpot ideas are stupid; trying to sell your crackpot ideas to others is fraud.\n\n\n\nI don’t know if it was desperation or greed, but they tried to sell their crackpot product to an audience with someone attending that was just clueful enough to realize that something’s amiss. If they hadn’t been trying to sell their crackpot ideas, I would never have even heard of them.\n\n\n\nWhen you add those facts together, I can only conclude that bi-symmetric encryption is a fraud being perpetuated by Chad Wanless of CEW Systems in Canada.\n\n\n\nWhat Did Dr. Coupal Reveal?\n\n\n\nIf you recall, CWE Systems erroneously leaked the same “CTO Report” that they claimed would only be made available to parties that agreed to their Non-Disclosure Agreement.\n\n\n\nI’d like to take this opportunity to annotate some of the interesting revelations from Dr. Cyril Coupal’s report. Feel free to skip this section if you aren’t interested.\n\n\n\nThe Analysis Was “Short”\n\n\n\nThe introduction of the CTO report states:\n\n\n\nCEW Systems Canada Inc. has asked the Saskatchewan Polytechnic Digital Integration Centre of Excellence (DICE) group to perform a short CTO-funded analysis on their Bi-Symmetric Hybrid Encryption System.\n\n\n\nI don’t know what “short CTO-funded analysis” (a unique phrase that doesn’t exist online outside the context of CEW Systems) even means, but any short analysis is unlikely to be a careful one.\n\n\n\nHow the “Encryption” is Achieved\n\n\n\nThe bottom of page 1 (Overview of the Approach) states:\n\n\n\nThe encryption itself is achieved by randomly generating keys and interweaving them with portions of unencrypted data to be transmitted, applied to single bytes of data rather than long byte collections.\n\n\n\nThis is basically how the broken stream cipher, RC4, was designed. There’s not much novel to say about this. RC4 sucked.\n\n\n\nMisleading Scale\n\n\n\nThe top of page 4 contains this gem of deception:\n\n\n\nTwo things: \n\n\n\nThis should really use a logarithmic scale.\nThe powers of 2 being discussed are small potatoes. If you’re trying to factor 2048-bit numbers, your X axis needs to extend way past 30.\nI’m honestly not sure if this is because the author was in a rush, or if they’re in on the scam. I sent an email and will update this post when I have any further light to shed on this matter.\n\n\n\nTrusted Setup Required\n\n\n\nTowards the bottom of page 8 (under the heading: What about initial secret exchange and account setup?) states:\n\n\n\nCommon secrets, known to both server and client, must be exchanged when initial set up of accounts is made. Various methods exist to do this, but most involve the human factor, which is dangerous.\n\n\n\nWay to bury the lede! I can already devise and deploy purely symmetric system that requires pre-shared keys today. That doesn’t make such a system practical or reliable.\n\n\n\nRevenge of the Immortal Security Questions\n\n\n\nAt the top of page 10, Dr. Coupal was kind enough to include a screenshot titled “Forgot Password Example” which shows the breathtaking cluelessness of CEW Systems.\n\n\n\nSecurity questions are an anti-pattern. There are better mechanisms available. Why would anyone intentionally design a new system that uses password-equivalents that users don’t realize are as sensitive as their actual passwords? \n\n\n\nIt doesn’t matter how you’re encrypting the answers if they can be leaked from third party apps, and are rarely (if ever) revoked.\n\n\n\nCursed User Interface\n\n\n\nJust look at this monstrosity.\n\n\n\nThis is absolutely cursed.\n\n\n\nThe Smoking Gun\n\n\n\nThe entire discipline of Cryptography has a tenet called Kerckhoffs’s Principle: a cryptosystem should be secure, even if everything about the system, except the key, is public knowledge.\n\n\n\nAt the bottom of page 11 of the CTO Report, Dr. Coupal states:\n\n\n\n\nThe implementation algorithms cannot be open source.\n\nKnowing the procedures would aid in hacking the keys, therefore, the actual implementation of the algorithms, as well as the algorithms themselves, must be kept secret. The interweaving protocol is not mathematically based, but procedurally based. Of course, the data secrets for each client-server interchange must also be known, which is highly unlikely. CEW has many protocols in place to keep their application code secure. However, this may cause difficulty in obtaining certification by security agencies if they cannot inspect the code for security issues and thoroughness. Finally, it is not currently known how easy it would be to reverse engineer a copy of the executable code.\n(Emphasis mine.)\n\n\n\n\nCredit: Lynx vs Jackalope\n\n\n\nIn Conclusion\n\n\n\nWhile cryptographic snake-oil salesmen aren’t peddling sex lube, they’ll be quick to fuck you just the same.\n\n\n\nIn this author’s opinion, “Bi-Symmetric Encryption” is a crackpot fraud, just like MyDataAngel, TimeAI, Crown Sterling, and so many other bullshit products and services before them. Don’t give them any money.\n\n\n\nThis story has a silver lining: Someone who felt something was amiss spoke up and the fraud was thus detected.\n\n\n\nAs @SwiftOnSecurity is quick to remind us when discussing their history as a Help Desk worker, your users are your first line of defense against security threats. They’ll be exposed to bullshit that you never will. (Chad Wanless never posted a paper on IACR’s ePrint, after all.)\n\n\nShare this:\nTwitter\nFacebook\n\nLike this:\n\nLike Loading...\n\n\n\n\n\tRelated"
  },
  "mention-of": "https://willnorris.com/2008/08/delta-and-the-security-question-anti-pattern/",
  "wm-property": "mention-of",
  "wm-private": false,
  "rels": {
    "canonical": "https://soatok.blog/2021/09/28/the-bi-symmetric-encryption-fraud/"
  }
}