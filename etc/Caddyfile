{
  order imageproxy after reverse_proxy
  auto_https off
}

:9000 {
  metrics
}

:8080 {
  log
  encode zstd gzip
  root public

  handle {
    file_server
    try_files {path} {path}.html {path}/ =404
  }

  handle_errors {
    rewrite * /error/
    templates
    file_server
  }

  @www host www.willnorris.com
  redir @www https://willnorris.com{uri}

  header * {
    X-Frame-Options "SAMEORIGIN"
    X-Content-Type-Options "nosniff"
    Content-Security-Policy "default-src 'self' 'unsafe-inline' data:; frame-src https://www.youtube.com https://asciinema.org; script-src 'self' 'unsafe-inline' https://asciinema.org; report-uri /api/csp-report/"
  }

  @https expression protocol('https') || header({'x-forwarded-proto': 'https'})
  header @https {
    Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
  }

  # redirects
  redir /@will https://mastodon.willnorris.net/@will
  redir /contact  /about#contact
  redir /contact/ /about#contact
  redir /photo.jpg /logo.jpg permanent
  redir /about/resume /resume/

  redir /feed /atom.xml permanent
  redir /feed/ /atom.xml permanent
  redir /feed.atom /atom.xml permanent

  redir /licenses/mit  https://opensource.org/licenses/MIT
  redir /licenses/mit/ https://opensource.org/licenses/MIT

  redir /go/microformats/live https://go.microformats.io/
  redir /api/microformats/python https://python.microformats.io

  @tag path_regexp search /(category|search|tag)/(\w+)
  redir @tag /search?q={re.search.2}

  @search {
    path /search
    query q=*
  }
  redir @search https://duckduckgo.com/html/?q={http.request.uri.query.q}+site:willnorris.com

  # redirect old WordPress /?p=123 URLs to /p/123
  @postid {
    path /
    query p=*
  }
  redir @postid /p/{http.request.uri.query.p}

  # redirect /w/ shortlinks to /wiki/
  @wiki path_regexp wiki /w(/.*|$)
  redir @wiki /wiki{re.wiki.1} permanent
  header /wiki/* X-Robots-Tag "noindex"

  # support webfinger lookup (https://wjn.me/b/4XG1)
  @webfinger {
    path /.well-known/webfinger
    method GET HEAD
    query resource=acct:will@willnorris.com
    query resource=mailto:will@willnorris.com
    query resource=https://willnorris.com
    query resource=https://willnorris.com/
  }
  rewrite @webfinger /webfinger.json
  header @webfinger {
    Content-Type "application/jrd+json"
    Access-Control-Allow-Origin "*"
    X-Robots-Tag "noindex"
  }

  # allow go subpackages to be fetchable with `go get` (https://wjn.me/b/4_m1)
  @gopkg {
    path_regexp gopkg (/go/\w+/).+
    query go-get=*
  }
  rewrite @gopkg {re.gopkg.1}

  # redirect old /YYYY/MM/name/ URLs to /YYYY/name/
  @posts path_regexp posts ^/(\d{4})/\d{2}/(.+)
  redir @posts /{re.posts.1}/{re.posts.2} permanent

  # allow navigating post archives by redirecting date-based URLs
  # like /2015/ or /2015/02/ to /archives#2015.
  @archives path_regexp archives ^/(\d{4})(/\d{2})?/?$
  redir @archives /archives/#{re.archives.1}

  # redirect /tweets/{id} or /tweet/{id} to /tweets/#{id}
  @tweets path_regexp tweets ^/tweets?/(\d+)$
  redir @tweets /tweets/#{re.tweets.1}

  # health check
  handle /ok {
    respond OK
  }

  # image proxy (https://wjn.me/b/J_)
  @imageproxy path /api/imageproxy/*
  handle @imageproxy {
    uri replace /api/imageproxy/ /

    # disable imageproxy's built-in metrics endpoint
    respond /metrics "metrics disabled" 404

    imageproxy {
      cache /home/nonroot/imageproxy-cache
      default_base_url {$IMAGEPROXY_BASEURL}
      allow_hosts {$IMAGEPROXY_ALLOWHOSTS}
      signature_key {$IMAGEPROXY_SIGNATUREKEY}
      verbose true
    }
  }

  # proxy webmentions to webmentions.io
  @webmention {
    method POST
    path /api/webmention
  }
  handle @webmention {
    uri replace /api/webmention /willnorris.com/webmention
    reverse_proxy https://webmention.io {
      header_up Host {upstream_hostport}
    }
  }

  @pingback {
    method POST
    path /api/pingback
  }
  handle @pingback {
    uri replace /api/pingback /willnorris.com/xmlrpc
    reverse_proxy https://webmention.io {
      header_up Host {upstream_hostport}
    }
  }

  # proxy to unrot.link API
  @unrot path /api/unrot/*
  handle @unrot {
    uri replace /api/unrot/ /
    reverse_proxy https://unrot.link {
      header_up Host {upstream_hostport}
    }
  }

  # proxy CSP reports to sentry
  @csp-report {
    method POST
    path /api/csp-report/
  }
  handle @csp-report {
    rewrite * "/api/4506174976622592/security/?sentry_key=6f2c3c8be0f1360eddf221376bb96366"
    reverse_proxy https://o4506174976425984.ingest.sentry.io {
      header_up Host {upstream_hostport}
    }
  }

  # Add CORS headers for fonts, which Chrome OS terminal requires.
  header /fonts/* Cross-Origin-Resource-Policy cross-origin
  header /fonts/* Access-Control-Allow-Origin "*"

  handle /-/* {
    uri replace /-/ /
    reverse_proxy http://samson:10000 {
      transport tailscale
      header_up Host {upstream_hostport}
    }
  }

  # cache static resources
  @static path_regexp \.(js|mjs|css|png|jpg|jpeg|gif|ico|woff)$
  header @static Cache-Control max-age=31536000 # 365 days
}
